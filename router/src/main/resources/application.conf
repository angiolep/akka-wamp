http {
  server {
    server-header = "akka-wamp-0.15.2"

    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle connection timeouts.
    #
    idle-timeout = infinite
  }
  client {
    idle-timeout = infinite
  }
}

#router
akka {
  wamp {
    router {
      # One or more endpoint configurations.
      #
      # Each endpoint configuration listed here will make the router process
      # bind a separate connection listener onto the given address.
      endpoint {
        #
        # The default endpoint
        default {
          # The address to bind to. Scheme can be:
          #
          #    - ws
          #        WebSocket
          #    - wss
          #        WebSocket over TLS
          #
          address = "ws://localhost:8080/wamp"

          # Message format can be:
          #
          #    - json
          #        JSON Javascript Object Notation
          #
          format = "json"
        }

        # Additional endpoint configurations here ...
      }

      # The boolean switch to validate against strict URIs
      # rather than loose URIs
      #
      validate-strict-uris = false

      # The boolean switch to abort upon receiving HELLO for
      # unknown realms.
      #
      # By default, unknown realms will be automatically created.
      #
      abort-unknown-realms = false

      # The boolean switch to allow tolerance against protocol violations.
      #
      # By default, offending messages (those that violate the WAMP protocol)
      # will cause session to be closed and transport to be disconnected.
      # Set this switch on if you rather prefer to drop offending messages
      # and resume as normal.
      #
      tolerate-protocol-violations = false

      # The path to the directory whose files will be served as HTTP static
      # resources
      #
      webroot = ${user.home}/examples/router/webroot
    }
  }
  #router

  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  loggers = ["akka.event.slf4j.Slf4jLogger"]

  // If you set the loglevel to a higher level than “DEBUG”, any DEBUG events
  // will be filtered out already at the source and will never reach the
  // logging backend, regardless of how the backend is configured.
  loglevel = "DEBUG"

  // It will filter the log events using the backend configuration (e.g. logback.xml)
  // before they are published to the event bus.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}


#tls
ssl-config {
  trustManager {
    stores = [
      { type = "JKS", path = ${java.home}/lib/security/cacerts, password = "changeit" }
    ]
  }
}
#tls


